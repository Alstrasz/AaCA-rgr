#include "heap.h"


char heap_create(struct max_heap *inp)
{
    inp->last_index = 0;
    return vector_create(&inp->vec, 4);
}

char heap_create_from_vector(struct max_heap *inp, struct vector *from, uint32_t size)
{
    char t;
    //  t = vector_copy(&inp->vec, from);
    //  if(t > 0) return t;
    inp->vec = *from;
    inp->last_index = size;
    for(uint32_t i = 0; i < inp->last_index; i++)
    {
        t = heap_fix(inp, inp->last_index - 1 - i);
        if(t > 0) return t;
    }
    return 0;
}

char heap_top(struct max_heap *inp, int64_t *ret)
{
    return vector_get(&inp->vec, 0, ret);
}

char heap_pop(struct max_heap *inp)
{
    char t;
    int64_t val;
    t = vector_get(&inp->vec, inp->last_index - 1, &val);
    if(t > 0) return t;
    t = vector_set(&inp->vec, 0, val);
    if(t > 0) return t;
    t = heap_fix(inp, 0);
    if(t > 0) return t;

    inp->last_index--;
    
    return 0;
}

char heap_insert(struct max_heap *inp, int64_t elem){
    char t;

    if(inp->last_index >= inp->vec.size)
    {
        t = vector_resize(&inp->vec, inp->last_index * 2);
        if(t > 0) return t;
    }
    
    t = vector_set(&inp->vec, inp->last_index, INT32_MIN);
    if(t > 0) return t;
    
    t = heap_change_val(inp, inp->last_index, elem);
    if(t > 0) return t;

    inp->last_index++;
    
    return 0;
}

char heap_fix(struct max_heap *inp, uint32_t index)
{
    char t;
    uint32_t left = (index) * 2 + 1;
    uint32_t right = (index) * 2 + 2;
    uint32_t largest = index;
    
    int64_t curr_val = -1,left_val = -1, right_val = -1;
    t = vector_get(&inp->vec, index, &curr_val);
    if(t > 0) return t;
    
    if(left < inp->last_index)
    {
            t = vector_get(&inp->vec, left, &left_val);
            if(t > 0) return t;
            if(left_val > curr_val)
            {
                largest = left;
                curr_val = left_val;
            }
    }
    if(right < inp->last_index)
    {
        t = vector_get(&inp->vec, right, &right_val);
        if(t > 0) return t;
        if(right_val > curr_val)
        {
            largest = right;
            curr_val = right_val;
        }
    }
    if(largest != index){
        t = vector_get(&inp->vec, index, &curr_val);
        if(t > 0) return t;
        t = vector_get(&inp->vec, largest, &left_val);
        if(t > 0) return t;
        t = vector_set(&inp->vec, largest, curr_val);
        if(t > 0) return t;
        t = vector_set(&inp->vec, index, left_val);
        if(t > 0) return t;
        heap_fix(inp, largest);
    }
    
    return 0;
}
/*
              0
     1               2
  3     4        5       6
7   8  9  10    11  12  13  14
*/
char heap_delete(struct max_heap *inp)
{
    inp->last_index = 0;
    return vector_delete(&inp->vec);
}

char heap_change_val(struct max_heap *inp, uint32_t pos, int64_t val)
{
    char t = 0;
    int64_t old_val;
    t = vector_get(&inp->vec, pos, &old_val);
    if (t > 0) return t;
    if (val <= old_val) return 3;

    t = vector_set(&inp->vec, pos, val);
    if (t > 0) return t;

    uint32_t parent = (pos - 1) / 2;
    t = vector_get(&inp->vec, parent, &old_val);
    if (t > 0) return t;

    while(pos > 0 && val > old_val){
        t = vector_set(&inp->vec, pos, old_val);
        if (t > 0) return t;

        t = vector_set(&inp->vec, parent, val);
        if (t > 0) return t;

        pos = parent;
        
        parent = (pos - 1) / 2;
        t = vector_get(&inp->vec, parent, &old_val);
        if (t > 0) return t;
    }
    
    return 0;
}
