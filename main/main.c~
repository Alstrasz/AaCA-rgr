#include "main.h"


int main( void )
{
    /*
    struct vector vc;
    struct max_heap hp;
    int64_t tmp;
    char t;

    if(0 != (t = vector_create(&vc, 4))) printf("a %d", t);

    if(0 != (t = vector_pushback(&vc, 2))) printf("b %d", t);
    if(0 != (t = vector_pushback(&vc, 1))) printf("c %d", t);
    if(0 != (t = vector_pushback(&vc, 3))) printf("d %d", t);
    if(0 != (t = vector_pushback(&vc, 4))) printf("e %d", t);

    if(0 != (t = heap_create_from_vector(&hp, &vc, 4))) printf("f %d", t);

    if(0 != (t = heap_insert(&hp, 6))) printf("L %d", t);
    if(0 != (t = heap_insert(&hp, 5))) printf("m %d", t);

    for(int32_t i = 0; i < 6; i++){
        if(0 != (t = heap_top(&hp, &tmp))) printf("g %d", t);
        if(0 != (t = heap_pop(&hp))) printf("h %d", t);
        printf("%ld ", tmp);
    }
    printf("\n");

    //if(0 != (t = vector_delete(&vc))) printf("i %d", t);
    if(0 != (t = heap_delete(&hp))) printf("j %d", t);

    if(0 != (t = heap_create(&hp))) printf("k %d", t);

    if(0 != (t = heap_insert(&hp, 3))) printf("i %d", t);
    if(0 != (t = heap_insert(&hp, 2))) printf("m %d", t);
    if(0 != (t = heap_insert(&hp, 5))) printf("n %d", t);
    if(0 != (t = heap_insert(&hp, 4))) printf("o %d", t);
    if(0 != (t = heap_insert(&hp, 1))) printf("p %d", t);
    if(0 != (t = heap_insert(&hp, 6))) printf("q %d", t);
    if(0 != (t = heap_insert(&hp, 7))) printf("r %d", t);
    if(0 != (t = heap_insert(&hp, 8))) printf("s %d", t);

    for(int32_t i = 0; i < 4; i++){
        if(0 != (t = heap_top(&hp, &tmp))) printf("t %d", t);
        if(0 != (t = heap_pop(&hp))) printf("u %d", t);
        printf("%ld ", tmp);
    }
    printf("\n");
    
    if(0 != (t = heap_insert(&hp, 4))) printf("p %d", t);
    if(0 != (t = heap_insert(&hp, 9))) printf("q %d", t);
    if(0 != (t = heap_insert(&hp, 2))) printf("r %d", t);
    if(0 != (t = heap_insert(&hp, 10))) printf("s %d", t);

        for(int32_t i = 0; i < 8; i++){
        if(0 != (t = heap_top(&hp, &tmp))) printf("t %d", t);
        if(0 != (t = heap_pop(&hp))) printf("u %d", t);
        printf("%ld ", tmp);
    }
    
    printf("\n");
    */

/*

    struct vector vec;
    int64_t t1, t2 = 0;

    vector_create(&vec, 9);

        vector_pushback(&vec, 4);
    vector_pushback(&vec, 3);
    vector_pushback(&vec, 2);
    vector_pushback(&vec, 0);
    vector_pushback(&vec, 3);
    vector_pushback(&vec, 1);
    vector_pushback(&vec, 4);
    vector_pushback(&vec, 1);
    vector_pushback(&vec, 5);

    vector_lexic_sort(&vec, 9, 64);

    for(int32_t i = 0; i < 9; i++)
    {
        vector_get(&vec, i, &t1);
        printf("%ld ", t1);
    }

    vector_delete(&vec);


*/
/*
    struct vector vec;
    int64_t t1;

    vector_create(&vec, 9);
    vec.pointers = 1;

    char s1[] = "abc";
    char s2[] = "abcd";
    char s3[] = "abCd";
    char s4[] = "abcD";
    char s5[] = "aBcd";
    char s6[] = "Abcd";
    char s7[] = "Ad";
    char s8[] = "acd";
    char s9[] = "abc";

    vector_pushback(&vec, (int64_t) s1);
    vector_pushback(&vec, (int64_t) s2);
    vector_pushback(&vec, (int64_t) s3);
    vector_pushback(&vec, (int64_t) s4);
    vector_pushback(&vec, (int64_t) s5);
    vector_pushback(&vec, (int64_t) s6);
    vector_pushback(&vec, (int64_t) s7);
    vector_pushback(&vec, (int64_t) s8);
    vector_pushback(&vec, (int64_t) s9);
    

    vector_lexic_sort(&vec, 9, 6);
    //vector_pyramid_sort(&vec, 9);

    for(int32_t i = 0; i < 9; i++)
    {
        vector_get(&vec, i, &t1);

        printf("%s\n", (char *)t1);
    }

    vector_delete(&vec);
*/

    FILE * file = fopen("input.txt", "r");
    uint32_t n, l;
    fscanf(file, "%u %d", &n, &l);
    
    printf("%u, %d", n, l);

    fclose(file);
    
    return 0;
}
